---

- name: L3LS Health Check
  hosts: all
  gather_facts: no
  connection: local
  vars:
     item: "foo"

  tasks:

    - name: Set Date Stamp
      set_fact: date="{{lookup('pipe','date +%Y%m%d')}}"
      tags: date_stamp
      run_once: true

    - name: Set Time Stamp
      set_fact: time="{{lookup('pipe','date +%Y%m%d%H%M%S')}}"
      tags: time_stamp
      run_once: true

    - name: Part 1 - Validate OSPF Health
      block:

      - name: Task 1 - Capture current list of OSPF Neighbors
        eos_command:
          commands:
            - show ip ospf neighbor | json
        register: ospfneighbors
  
      - name: Task 2 - Setting Fact - OSPF Neighbor Count
        set_fact:
          ospfneigh_count: "{{ ospfneighbors.stdout[0].vrfs.default.instList['100'].ospfNeighborEntries | length }}"
  
      - name: Task 3 - Validate that all expectected OSPF Neighbors are in place
        assert:
          that:
            - "{{ ospfneigh_count | int >= ospfadjcount }}"
          fail_msg: "{{ inventory_hostname }} only has {{ ospfneigh_count }} neighbors. It should have {{ ospfadjcount }}!"

 
      - name: Task 4 - Capture list of interfaces that have OSPF enabled
        tags: ospfint
        eos_command:
          commands:
            - show ip ospf interface brief | json
        register: ospfints

      - name: Task 5 - Set fact - List of expected OSPF Interfaces
        tags: ospfint
        set_fact:
          ospfints_expected: "{{ lookup('template', './ospfintlist.j2') }}"

      - name: Task 6 - Set Fact - List of actual OSPF interfaces
        tags: ospfint
        set_fact:
          ospfints_actual: "{{ ospfints.stdout[0].vrfs.default.instList['100'].interfaces | list }}"

      - name: Task 7 - Validate that all expected interfaces are running OSPF
        tags: ospfint
        assert:
          that:
            - "'{{ item }}' in ospfints.stdout[0].vrfs.default.instList['100'].interfaces"
          fail_msg: "{{ inventory_hostname }} Does not have the list of active OSPF interfaces that we expected."
        with_items: 
          - "{{ ospfints_expected }}"
      
      - name: Task 8 - Check for any interfaces running OSPF that should not be
        tags: ospfint
        assert:
          that:
            - "'{{ item }}' in ospfints_expected"
          fail_msg: "{{ inventory_hostname }} has interfaces running OSPF that we did not expect."
        with_items:
          - "{{ ospfints_actual }}"

      - name: Task 9 - Capture OSPF database summary for the area from any node
        tags: ospfdb
        eos_command:
          commands:
            - show ip ospf database database-summary | json
        register: ospfdbsum_truth
        run_once: true

      - name: Task 10 - Capture the OSPF database summary from every node within the area
        tags: ospfdb
        eos_command:
          commands:
            - show ip ospf database database-summary | json
        register: ospfdbsum_node

#      - name: Task 11 - Validate that the OSPF database summary is consistent within the area
#        tags: ospfdb
#       assert:
#         that: "{{ item.key }} == {{ ospfdbsum_truth.stdout[0].vrfs.default.instList['100'].{{ item }} }}"
#         fail_msg: "{{ inventory_hostname }} has an inconsistent OSPF database for Area 0"
#       with_dict: "{{ ospfdbsum_node.stdout[0].vrfs.default.instList['100'] }}"


      rescue:
        - name: Send a Slack Message reporting the failure
          slack:
            token: T9E1Z68H3/BC10PAM42/9jtmxAXW4LeGLuD7pABgMvr5
            msg: "*{{ inventory_hostname }} failed the OSPF Health Check.*\n\n *It failed on task:* {{ ansible_failed_task.name }}\n\n*The error message was:* {{ ansible_failed_task.args.fail_msg }}"
            color: danger
          delegate_to: localhost
       




 
#    - name: Testing
#      debug:
#        var: "{{ ospfneigh_count }}"
